{"version":3,"sources":["webpack:///./src/useCoda.js"],"names":["mapRowsAndCols","row","columns","values","Object","entries","map","key","value","name","reduce","res","curr","replace","match","index","toLowerCase","toUpperCase","coda","instance","getTableColumns","docId","tableIdOrName","get","getTableRows","params","sortBy","getViewColumns","viewIdOrName","getViewRows","getTableData","dataColumns","data","dataRows","items","id","getViewData"],"mappings":"gkEAAA,IAMMA,EAAiB,SAACC,EAAKC,GAC3B,IAKMC,EALcC,OAAOC,QAAQJ,EAAIE,QAAQG,KAAI,yBAAEC,EAAF,KAAOC,EAAP,WAAmB,CACpEC,KAAMP,EAAQK,GACdC,YAGyBE,QACzB,SAACC,EAAKC,GAAN,cAAqBD,GAArB,QAAoCC,EAAKH,KAZvCI,QAAQ,2BAA2B,SAAUC,EAAOC,GACtD,OAAe,IAAVD,EAAoB,GACR,IAAVC,EAAcD,EAAME,cAAgBF,EAAMG,iBAUAL,EAAKJ,UACtD,IAEF,YAAYL,IAGDe,EAAO,SAACC,GACnB,IAAMC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAV,OACtBH,EAASI,IAAT,gBAAsBF,EAAtB,mBAAsCC,EAAtC,cAEIE,EAAe,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAV,OACnBH,EAASI,IAAT,gBAAsBF,EAAtB,mBAAsCC,EAAtC,SAA4D,CAC1DG,OAAQ,CAAEC,OAAQ,cAGhBC,EAAiB,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAOO,EAAV,EAAUA,aAAV,OACrBT,EAASI,IAAT,gBAAsBF,EAAtB,kBAAqCO,EAArC,cAEIC,EAAc,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOO,EAAV,EAAUA,aAAV,OAClBT,EAASI,IAAT,gBAAsBF,EAAtB,kBAAqCO,EAArC,SAA0D,CACxDH,OAAQ,CAAEC,OAAQ,cA0BtB,MAAO,CAAEI,aAvBS,4CAAG,uHAAST,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,cAAhB,SACiBF,EAAgB,CAClDC,QACAC,kBAHiB,uBACLS,EADK,EACXC,KADW,SAKcR,EAAa,CAAEH,QAAOC,kBALpC,uBAKLW,EALK,EAKXD,KACF9B,EAAU6B,EAAYG,MAAMxB,QAChC,SAACC,EAAKC,GAAN,cAAqBD,GAArB,QAA2BC,EAAKuB,GAAKvB,EAAKH,SAC1C,IARiB,kBAUZwB,EAASC,MAAM5B,KAAI,SAACL,GAAD,OAASD,EAAeC,EAAKC,OAVpC,4CAAH,sDAuBKkC,YAVN,4CAAG,uHAASf,EAAT,EAASA,MAAOO,EAAhB,EAAgBA,aAAhB,SACkBD,EAAe,CAAEN,QAAOO,iBAD1C,uBACJG,EADI,EACVC,KADU,SAEeH,EAAY,CAAER,QAAOO,iBAFpC,uBAEJK,EAFI,EAEVD,KACF9B,EAAU6B,EAAYG,MAAMxB,QAChC,SAACC,EAAKC,GAAN,cAAqBD,GAArB,QAA2BC,EAAKuB,GAAKvB,EAAKH,SAC1C,IALgB,kBAOXwB,EAASC,MAAM5B,KAAI,SAACL,GAAD,OAASD,EAAeC,EAAKC,OAPrC,4CAAH","file":"2.index.js","sourcesContent":["const camelize = (str) =>\n  str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n    if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n\nconst mapRowsAndCols = (row, columns) => {\n  const valuesArray = Object.entries(row.values).map(([key, value]) => ({\n    name: columns[key],\n    value,\n  }));\n\n  const values = valuesArray.reduce(\n    (res, curr) => ({ ...res, [camelize(curr.name)]: curr.value }),\n    {}\n  );\n  return { ...values };\n};\n\nexport const coda = (instance) => {\n  const getTableColumns = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/columns`);\n\n  const getTableRows = ({ docId, tableIdOrName }) =>\n    instance.get(`/docs/${docId}/tables/${tableIdOrName}/rows`, {\n      params: { sortBy: 'natural' },\n    });\n\n  const getViewColumns = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/columns`);\n\n  const getViewRows = ({ docId, viewIdOrName }) =>\n    instance.get(`/docs/${docId}/views/${viewIdOrName}/rows`, {\n      params: { sortBy: 'natural' },\n    });\n\n  const getTableData = async ({ docId, tableIdOrName }) => {\n    const { data: dataColumns } = await getTableColumns({\n      docId,\n      tableIdOrName,\n    });\n    const { data: dataRows } = await getTableRows({ docId, tableIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  const getViewData = async ({ docId, viewIdOrName }) => {\n    const { data: dataColumns } = await getViewColumns({ docId, viewIdOrName });\n    const { data: dataRows } = await getViewRows({ docId, viewIdOrName });\n    const columns = dataColumns.items.reduce(\n      (res, curr) => ({ ...res, [curr.id]: curr.name }),\n      {}\n    );\n    return dataRows.items.map((row) => mapRowsAndCols(row, columns));\n  };\n\n  return { getTableData, getViewData };\n};\n"],"sourceRoot":""}